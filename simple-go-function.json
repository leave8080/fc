{
  "name": "simple-calculator",
  "runtime": "go",
  "handler": "calculate",
  "code": "import \"fmt\"\n\nfunc calculate(event interface{}, context map[string]string) interface{} {\n    eventMap, ok := event.(map[string]interface{})\n    if !ok {\n        return map[string]interface{}{\n            \"error\": \"Invalid event format\",\n        }\n    }\n\n    operation, hasOp := eventMap[\"operation\"].(string)\n    numbers, hasNumbers := eventMap[\"numbers\"].([]interface{})\n    \n    if !hasOp || !hasNumbers {\n        return map[string]interface{}{\n            \"error\": \"Missing operation or numbers\",\n        }\n    }\n\n    var nums []float64\n    for _, v := range numbers {\n        if num, ok := v.(float64); ok {\n            nums = append(nums, num)\n        }\n    }\n\n    var result float64\n    switch operation {\n    case \"sum\":\n        for _, num := range nums {\n            result += num\n        }\n    case \"multiply\":\n        result = 1\n        for _, num := range nums {\n            result *= num\n        }\n    case \"average\":\n        for _, num := range nums {\n            result += num\n        }\n        result = result / float64(len(nums))\n    default:\n        return map[string]interface{}{\n            \"error\": \"Unsupported operation\",\n        }\n    }\n\n    return map[string]interface{}{\n        \"operation\": operation,\n        \"numbers\": nums,\n        \"result\": result,\n        \"message\": fmt.Sprintf(\"Processed by Go function for user: %s\", context[\"user\"]),\n    }\n}",
  "timeout": 30,
  "memory": 128,
  "environment": {
    "SERVICE_NAME": "SimpleCalculator",
    "VERSION": "1.0"
  }
} 